#include <stdio.h>
#include <stdlib.h>

// Define a structure for a stack node
struct StackNode {
    int data;
    struct StackNode* next;
};

// Define a structure for a stack
struct Stack {
    struct StackNode* top;
};

// Function to initialize an empty stack
void initialize(struct Stack* stack) {
    stack->top = NULL;
}

// Function to check if a stack is empty
int isEmpty(struct Stack* stack) {
    return (stack->top == NULL);
}

// Function to push an element onto the stack
void push(struct Stack* stack, int data) {
    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    if (newNode == NULL) {
        printf("Memory allocation error\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = stack->top;
    stack->top = newNode;
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        exit(1);
    }
    struct StackNode* temp = stack->top;
    int popped = temp->data;
    stack->top = stack->top->next;
    free(temp);
    return popped;
}

// Define a structure for a queue using two stacks
struct Queue {
    struct Stack stack1;
    struct Stack stack2;
};

// Function to initialize an empty queue
void initializeQueue(struct Queue* queue) {
    initialize(&queue->stack1);
    initialize(&queue->stack2);
}

// Function to enqueue an element into the queue
void enqueue(struct Queue* queue, int data) {
    push(&queue->stack1, data);
}

// Function to dequeue an element from the queue
int dequeue(struct Queue* queue) {
    if (isEmpty(&queue->stack1) && isEmpty(&queue->stack2)) {
        printf("Queue is empty\n");
        exit(1);
    }

    if (isEmpty(&queue->stack2)) {
        // Transfer elements from stack1 to stack2
        while (!isEmpty(&queue->stack1)) {
            int data = pop(&queue->stack1);
            push(&queue->stack2, data);
        }
    }

    // Pop the front element from stack2
    return pop(&queue->stack2);
}

int main() {
    struct Queue queue;
    initializeQueue(&queue);

    // Enqueue elements into the queue
    enqueue(&queue, 1);
    enqueue(&queue, 2);
    enqueue(&queue, 3);

    // Dequeue elements from the queue
    printf("Dequeued: %d\n", dequeue(&queue));
    printf("Dequeued: %d\n", dequeue(&queue));

    // Enqueue more elements
    enqueue(&queue, 4);
    enqueue(&queue, 5);

    // Dequeue remaining elements
    printf("Dequeued: %d\n", dequeue(&queue));
    printf("Dequeued: %d\n", dequeue(&queue));
    printf("Dequeued: %d\n", dequeue(&queue));

    return 0;
}
