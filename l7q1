#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_QUEUE_SIZE 5

// Define a structure for the circular queue
struct CircularQueue {
    char data[MAX_QUEUE_SIZE][50]; // Assuming each string has a maximum length of 49 characters
    int front, rear;
};

// Function to initialize the circular queue
void initialize(struct CircularQueue* queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Function to check if the queue is empty
int isEmpty(struct CircularQueue* queue) {
    return (queue->front == -1);
}

// Function to check if the queue is full
int isFull(struct CircularQueue* queue) {
    return ((queue->front == 0 && queue->rear == MAX_QUEUE_SIZE - 1) || (queue->front == queue->rear + 1));
}

// Function to insert an element into the circular queue
void insertcq(struct CircularQueue* queue, const char* str) {
    if (isFull(queue)) {
        printf("Queue is full. Cannot insert.\n");
        return;
    }

    if (isEmpty(queue)) {
        queue->front = 0;
        queue->rear = 0;
    } else {
        queue->rear = (queue->rear + 1) % MAX_QUEUE_SIZE;
    }

    strcpy(queue->data[queue->rear], str);
}

// Function to delete an element from the circular queue
void deletecq(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Cannot delete.\n");
        return;
    }

    printf("Deleted: %s\n", queue->data[queue->front]);

    if (queue->front == queue->rear) {
        // Only one element in the queue
        initialize(queue);
    } else {
        queue->front = (queue->front + 1) % MAX_QUEUE_SIZE;
    }
}

// Function to display the circular queue
void displaycq(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    int i = queue->front;
    printf("Circular Queue:\n");
    do {
        printf("%s\n", queue->data[i]);
        i = (i + 1) % MAX_QUEUE_SIZE;
    } while (i != (queue->rear + 1) % MAX_QUEUE_SIZE);
}

int main() {
    struct CircularQueue queue;
    initialize(&queue);

    insertcq(&queue, "One");
    insertcq(&queue, "Two");
    insertcq(&queue, "Three");
    insertcq(&queue, "Four");
    insertcq(&queue, "Five");

    displaycq(&queue);

    deletecq(&queue);

    displaycq(&queue);

    insertcq(&queue, "Six");

    displaycq(&queue);

    return 0;
}
